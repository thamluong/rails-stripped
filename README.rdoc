== README

Steps to get the application up and running.

* Ruby version
	ruby-2.1.2
	
* RVM version
	rvm 1.25.34 (master) 

* Rails version	
	Rails 4.2.0.beta4

* System dependencies

Uses Stripe javascript version 2. Check the Gemfile for other dependencies.

* Configuration

Step 1

Login to your stripe account. Copy the API Keys and set Stripe environment variables on your machine.

export STRIPE_PUBLISHABLE_KEY='pk_test_your publishable key' 
export STRIPE_SECRET_KEY='sk_test_your secret key' 

Step 2

Create config/initializers/stripe.rb and initialize the Stripe API Key and Stripe Public Key.

Rails.configuration.stripe = {
  publishable_key: ENV['STRIPE_PUBLISHABLE_KEY'],
  secret_key:      ENV['STRIPE_SECRET_KEY']
}

Stripe.api_key = Rails.configuration.stripe[:secret_key]
STRIPE_PUBLIC_KEY = Rails.configuration.stripe[:publishable_key]

* Database creation

rake db:create
rake db:migrate

* Database initialization

* How to run the test suite

* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions

* ...


Please feel free to use a different markup language if you do not plan to run
<tt>rake doc:app</tt>.

== Assumptions

1) The user is already logged in.
2) The user model will have email field.
3) You can define : User has_one subscription, Subscription belongs_to user after you integrate with Devise, Authlogic etc.
4) Move access over the network to a background job in a later version. 
5) To make the demo simple, the stripe related code is in the application wide layout. This should be moved to a separate app/views/layouts/subscriptions.html.erb layout file. Use this layout in subscriptions controller by using the Rails layout method.
6) The subscription page must be loaded using https.


=== Test Cases

Stripe Key Check
-----------

stripe-key meta-tag must define STRIPE_PUBLIC_KEY
Stripe.setPublishableKey($('meta[name="stripe-key"]').attr('content'));

